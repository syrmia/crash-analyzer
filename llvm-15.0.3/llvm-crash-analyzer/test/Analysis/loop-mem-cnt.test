# This tests the ability of a tool to deal with a memory counter.
#void f(){
#  int a = 1;
#  int* p[3] = {&a, &a, &a};
#  for(int i=0; i<3; i++){
#    if(i == 1){
#      p[i] = 0; // blame
#    }
#  }
#  *p[1] = 2; // crash
#}
#
#int main(){
#  f();
#  return 0;
#}



# RUN: %llvm-crash-analyzer --core-file=%S/Inputs/core.loop-mem-cnt \
# RUN:     %S/Inputs/loop-mem-cnt < %s 2>&1 | FileCheck %s

# CHECK: Blame Function is f
# XFAIL: *



# The result of the decompilation follows.
--- |
  ; ModuleID = 'output/t24'
  source_filename = "output/t24"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @f() !dbg !2 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !5 {
  entry:
    unreachable
  }
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/home/syrmia/Desktop/llvm-crash-analyzer/tests/input/test24.c", directory: "/")
  !2 = distinct !DISubprogram(name: "f", linkageName: "f", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            f
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x0000000000000000' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x000055ac2e721e20' }
    - { reg: rdx, value: '0x00007ffdb0439c78' }
    - { reg: rdi, value: '0x0000000000000001' }
    - { reg: rsi, value: '0x00007ffdb0439c68' }
    - { reg: rbp, value: '0x00007ffdb0439b30' }
    - { reg: rsp, value: '0x00007ffdb0439b30' }
    - { reg: r8, value: '0x00007f6d0801af10' }
    - { reg: r9, value: '0x00007f6d08095040' }
    - { reg: r10, value: '0x00007f6d0808f908' }
    - { reg: r11, value: '0x00007f6d080aa680' }
    - { reg: r12, value: '0x00007ffdb0439c68' }
    - { reg: r13, value: '0x000055ac2e71f1a0' }
    - { reg: r14, value: '0x000055ac2e721e20' }
    - { reg: r15, value: '0x00007f6d080c9040' }
    - { reg: rip, value: '0x000055ac2e71f192' }
    - { reg: rflags, value: '0x0000000000010246' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x00000000' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0x2e721e20' }
    - { reg: edx, value: '0xb0439c78' }
    - { reg: edi, value: '0x00000001' }
    - { reg: esi, value: '0xb0439c68' }
    - { reg: ebp, value: '0xb0439b30' }
    - { reg: esp, value: '0xb0439b30' }
    - { reg: r8d, value: '0x0801af10' }
    - { reg: r9d, value: '0x08095040' }
    - { reg: r10d, value: '0x0808f908' }
    - { reg: r11d, value: '0x080aa680' }
    - { reg: r12d, value: '0xb0439c68' }
    - { reg: r13d, value: '0x2e71f1a0' }
    - { reg: r14d, value: '0x2e721e20' }
    - { reg: r15d, value: '0x080c9040' }
    - { reg: ax, value: '0x0000' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0x1e20' }
    - { reg: dx, value: '0x9c78' }
    - { reg: di, value: '0x0001' }
    - { reg: si, value: '0x9c68' }
    - { reg: bp, value: '0x9b30' }
    - { reg: sp, value: '0x9b30' }
    - { reg: r8w, value: '0xaf10' }
    - { reg: r9w, value: '0x5040' }
    - { reg: r10w, value: '0xf908' }
    - { reg: r11w, value: '0xa680' }
    - { reg: r12w, value: '0x9c68' }
    - { reg: r13w, value: '0xf1a0' }
    - { reg: r14w, value: '0x1e20' }
    - { reg: r15w, value: '0x9040' }
    - { reg: ah, value: '0x00' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0x1e' }
    - { reg: dh, value: '0x9c' }
    - { reg: al, value: '0x00' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0x20' }
    - { reg: dl, value: '0x78' }
    - { reg: dil, value: '0x01' }
    - { reg: sil, value: '0x68' }
    - { reg: bpl, value: '0x30' }
    - { reg: spl, value: '0x30' }
    - { reg: r8l, value: '0x10' }
    - { reg: r9l, value: '0x40' }
    - { reg: r10l, value: '0x08' }
    - { reg: r11l, value: '0x80' }
    - { reg: r12l, value: '0x68' }
    - { reg: r13l, value: '0xa0' }
    - { reg: r14l, value: '0x20' }
    - { reg: r15l, value: '0x40' } }
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
crashOrder:      1
body:             |
  bb.0:
    successors: %bb.6(0x80000000)
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 1, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 1, scope: !2)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 1, debug-location !DILocation(line: 2, column: 7, scope: !2)
    $rax = LEA64r $rbp, 1, $noreg, -4, $noreg, debug-location !DILocation(line: 3, column: 15, scope: !2)
    MOV64mr $rbp, 1, $noreg, -32, $noreg, $rax, debug-location !DILocation(line: 3, column: 15, scope: !2)
    $rax = LEA64r $rbp, 1, $noreg, -4, $noreg, debug-location !DILocation(line: 3, column: 15, scope: !2)
    MOV64mr $rbp, 1, $noreg, -24, $noreg, $rax, debug-location !DILocation(line: 3, column: 15, scope: !2)
    $rax = LEA64r $rbp, 1, $noreg, -4, $noreg, debug-location !DILocation(line: 3, column: 15, scope: !2)
    MOV64mr $rbp, 1, $noreg, -16, $noreg, $rax, debug-location !DILocation(line: 3, column: 15, scope: !2)
    MOV32mi $rbp, 1, $noreg, -36, $noreg, 0, debug-location !DILocation(line: 4, column: 11, scope: !2)
  
  bb.6:
    successors: %bb.1(0x40000000), %bb.5(0x40000000)
    liveins: $rbp
  
    CMP32mi8 $rbp, 1, $noreg, -36, $noreg, 3, implicit-def $eflags, debug-location !DILocation(line: 4, column: 17, scope: !2)
    JCC_4 %bb.5, 13, implicit $eflags, debug-location !DILocation(line: 4, column: 3, scope: !2)
  
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $rbp
  
    CMP32mi8 $rbp, 1, $noreg, -36, $noreg, 1, implicit-def $eflags, debug-location !DILocation(line: 5, column: 10, scope: !2)
    JCC_4 %bb.3, 5, implicit $eflags, debug-location !DILocation(line: 5, column: 8, scope: !2)
  
  bb.2:
    successors: %bb.3(0x80000000)
    liveins: $rbp
  
    $rax = MOVSX64rm32 $rbp, 1, $noreg, -36, $noreg, debug-location !DILocation(line: 6, column: 7, scope: !2)
  ; Here it should be checked whether a taint list contains a pair of a register $rbp and an offset -32 + rax * 8.
    MOV64mi32 $rbp, 8, $rax, -32, $noreg, 0, debug-location !DILocation(line: 6, column: 12, scope: !2)
  
  bb.3:
    successors: %bb.4(0x80000000)
  
    JMP_4 %bb.4, debug-location !DILocation(line: 8, column: 3, scope: !2)
  
  bb.4:
    successors: %bb.6(0x80000000)
    liveins: $rbp
  
    $eax = MOV32rm $rbp, 1, $noreg, -36, $noreg, debug-location !DILocation(line: 4, column: 22, scope: !2)
    $eax = ADD32ri8 $eax, 1, implicit-def $eflags, debug-location !DILocation(line: 4, column: 22, scope: !2)
  ; Here it must be implemented a transfer of a value at an address $rbp-36 to a register $eax.
    MOV32mr $rbp, 1, $noreg, -36, $noreg, $eax, debug-location !DILocation(line: 4, column: 22, scope: !2)
    JMP_4 %bb.6, debug-location !DILocation(line: 4, column: 3, scope: !2)
  
  bb.5:
    liveins: $rbp
  
    $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg, debug-location !DILocation(line: 9, column: 4, scope: !2)
    crash-start MOV32mi $rax, 1, $noreg, 0, $noreg, 2, debug-location !DILocation(line: 9, column: 9, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 10, column: 1, scope: !2)
    RET64 debug-location !DILocation(line: 10, column: 1, scope: !2)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffdb0439b50' }
    - { reg: rsp, value: '0x00007ffdb0439b40' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x00007ffdb0439c68' }
    - { reg: r13, value: '0x000055ac2e71f1a0' }
    - { reg: r14, value: '0x000055ac2e721e20' }
    - { reg: r15, value: '0x00007f6d080c9040' }
    - { reg: rip, value: '0x000055ac2e71f1b4' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '' }
    - { reg: esp, value: '' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
crashOrder:      2
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 12, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 12, scope: !5)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 12, scope: !5)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 12, scope: !5)
    CALL64pcrel32 @f, csr_64, implicit $rsp, implicit $ssp, implicit-def $eax, implicit-def $eax, debug-location !DILocation(line: 13, column: 3, scope: !5)
    $eax = crash-start XOR32rr undef $eax, undef $eax, implicit-def $eflags, debug-location !DILocation(line: 14, column: 3, scope: !5)
    $rsp = ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 14, column: 3, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 14, column: 3, scope: !5)
    RET64 debug-location !DILocation(line: 14, column: 3, scope: !5)

...
