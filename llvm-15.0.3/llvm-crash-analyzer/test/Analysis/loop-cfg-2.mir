## This test is dedicated to test the order of machine basic blocks traversing when loops exist.

## The .c file is compiled by clang15 using the following command:
## clang -g -O0 test.c -o test.
## After that, the executable file is run using the following command:
## ./test.
## It generates segmentation fault and the core file.

## A content of the file test.c:
##
## int fn(int* t1) {
##   int a;
##   for(int i=0; i<4; i++){
##     a=i;
##   }
##   t1 = (int*)a;
##   return *t1;
## }
## 
## int main() {
##   int tmp =0;
##   return fn(&tmp);
## }


# RUN: %llvm-crash-analyzer-ta -debug-only=taint-analysis %s 2>&1 | FileCheck %s

# CHECK: MF - backward analysis: fn

## The postorder traversal of the blocks is the following: BB.2-BB.1-BB.3-BB.0. This is the consequence of the printed sequence of the successors of the block BB.3.
## If the printed sequence of the successors of the block BB.3 were %bb.1-%bb.2, the postorder traversal of the blocks would be the following: BB.1-BB.2-BB.3-BB.0.
## The postorder traversal visits all children of a node before visiting that node.
## BB.2
# CHECK: $eax = crash-start MOV32rm $rax, 1, $noreg, 0, $noreg
# CHECK: Add to TL: {reg:$rax; off:0}

# CHECK: $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg
# CHECK: Add to TL: {reg:$rbp; off:-8}
# CHECK: Remove from TL: {reg:$rax; off:0}

# CHECK: MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax
# CHECK: Add to TL: {reg:$rax}
# CHECK: Remove from TL: {reg:$rbp; off:-8}

# CHECK: $rax = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg
# CHECK: Add to TL: {reg:$rbp; off:-12}
# CHECK: Remove from TL: {reg:$rax}

## BB.3
# CHECK: CMP32mi8 $rbp, 1, $noreg, -16, $noreg, 4, implicit-def $eflags

## BB.1
# CHECK: MOV32mr $rbp, 1, $noreg, -16, $noreg, $eax
# CHECK: $eax = ADD32ri8 $eax(tied-def 0), 1, implicit-def $eflags
# CHECK: $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg

# CHECK: MOV32mr $rbp, 1, $noreg, -12, $noreg, $eax
# CHECK: Add to TL: {reg:$eax}
# CHECK: Remove from TL: {reg:$rbp; off:-12}

# CHECK: $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg
# CHECK: Add to TL: {reg:$rbp; off:-16}
# CHECK: Remove from TL: {reg:$eax}

## BB.3
# CHECK: CMP32mi8 $rbp, 1, $noreg, -16, $noreg, 4, implicit-def $eflags

## BB.0
# CHECK: MOV32mi $rbp, 1, $noreg, -16, $noreg, 0
# CHECK: Remove from TL: {reg:$rbp; off:-16}
# CHECK: Taint List is empty


# CHECK: Blame Function is fn


## Below is a content of the file test.mir, which is obtained by decompiler in crash-analyzer using the following command:
## llvm-crash-analyzer --core-file=core test --print-decompiled-mir=test.mir.
## I changed the printed order of the successors of the block BB.3.

--- |
  ; ModuleID = 'output/t16'
  source_filename = "output/t16"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  
  ; Materializable
  define void @fn() !dbg !2 {
  entry:
    unreachable
  }
  
  ; Materializable
  define void @main() !dbg !5 {
  entry:
    unreachable
  }
  
  !llvm.dbg.cu = !{!0}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "llvm-crash-analyzer", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "/home/syrmia/Desktop/llvm-crash-analyzer/tests/input/test16.c", directory: "/")
  !2 = distinct !DISubprogram(name: "fn", linkageName: "fn", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)
  !3 = !DISubroutineType(types: !4)
  !4 = !{}
  !5 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !1, line: 1, type: !3, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4)

...
---
name:            fn
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
regInfo:         { GPRegs: 
    - { reg: rax, value: '0x0000000000000003' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '0x000055d0af8dfe20' }
    - { reg: rdx, value: '0x00007ffe019e21d8' }
    - { reg: rdi, value: '0x00007ffe019e20a8' }
    - { reg: rsi, value: '0x00007ffe019e21c8' }
    - { reg: rbp, value: '0x00007ffe019e2090' }
    - { reg: rsp, value: '0x00007ffe019e2090' }
    - { reg: r8, value: '0x00007f40f681af10' }
    - { reg: r9, value: '0x00007f40f6915040' }
    - { reg: r10, value: '0x00007f40f690f908' }
    - { reg: r11, value: '0x00007f40f692a680' }
    - { reg: r12, value: '0x00007ffe019e21c8' }
    - { reg: r13, value: '0x000055d0af8dd170' }
    - { reg: r14, value: '0x000055d0af8dfe20' }
    - { reg: r15, value: '0x00007f40f6949040' }
    - { reg: rip, value: '0x000055d0af8dd169' }
    - { reg: rflags, value: '0x0000000000010246' }
    - { reg: cs, value: '0x0000000000000033' }
    - { reg: fs, value: '0x0000000000000000' }
    - { reg: gs, value: '0x0000000000000000' }
    - { reg: ss, value: '0x000000000000002b' }
    - { reg: ds, value: '0x0000000000000000' }
    - { reg: es, value: '0x0000000000000000' }
    - { reg: eax, value: '0x00000003' }
    - { reg: ebx, value: '0x00000000' }
    - { reg: ecx, value: '0xaf8dfe20' }
    - { reg: edx, value: '0x019e21d8' }
    - { reg: edi, value: '0x019e20a8' }
    - { reg: esi, value: '0x019e21c8' }
    - { reg: ebp, value: '0x019e2090' }
    - { reg: esp, value: '0x019e2090' }
    - { reg: r8d, value: '0xf681af10' }
    - { reg: r9d, value: '0xf6915040' }
    - { reg: r10d, value: '0xf690f908' }
    - { reg: r11d, value: '0xf692a680' }
    - { reg: r12d, value: '0x019e21c8' }
    - { reg: r13d, value: '0xaf8dd170' }
    - { reg: r14d, value: '0xaf8dfe20' }
    - { reg: r15d, value: '0xf6949040' }
    - { reg: ax, value: '0x0003' }
    - { reg: bx, value: '0x0000' }
    - { reg: cx, value: '0xfe20' }
    - { reg: dx, value: '0x21d8' }
    - { reg: di, value: '0x20a8' }
    - { reg: si, value: '0x21c8' }
    - { reg: bp, value: '0x2090' }
    - { reg: sp, value: '0x2090' }
    - { reg: r8w, value: '0xaf10' }
    - { reg: r9w, value: '0x5040' }
    - { reg: r10w, value: '0xf908' }
    - { reg: r11w, value: '0xa680' }
    - { reg: r12w, value: '0x21c8' }
    - { reg: r13w, value: '0xd170' }
    - { reg: r14w, value: '0xfe20' }
    - { reg: r15w, value: '0x9040' }
    - { reg: ah, value: '0x00' }
    - { reg: bh, value: '0x00' }
    - { reg: ch, value: '0xfe' }
    - { reg: dh, value: '0x21' }
    - { reg: al, value: '0x03' }
    - { reg: bl, value: '0x00' }
    - { reg: cl, value: '0x20' }
    - { reg: dl, value: '0xd8' }
    - { reg: dil, value: '0xa8' }
    - { reg: sil, value: '0xc8' }
    - { reg: bpl, value: '0x90' }
    - { reg: spl, value: '0x90' }
    - { reg: r8l, value: '0x10' }
    - { reg: r9l, value: '0x40' }
    - { reg: r10l, value: '0x08' }
    - { reg: r11l, value: '0x80' }
    - { reg: r12l, value: '0xc8' }
    - { reg: r13l, value: '0x70' }
    - { reg: r14l, value: '0x20' }
    - { reg: r15l, value: '0x40' } }
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
crashOrder:      1
body:             |
  bb.0:
    successors: %bb.3(0x80000000)
    liveins: $rbp, $rdi
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 2, scope: !2)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 2, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rdi, debug-location !DILocation(line: 2, scope: !2)
    MOV32mi $rbp, 1, $noreg, -16, $noreg, 0, debug-location !DILocation(line: 4, column: 11, scope: !2)
  
  bb.3:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rbp
  
    CMP32mi8 $rbp, 1, $noreg, -16, $noreg, 4, implicit-def $eflags, debug-location !DILocation(line: 4, column: 17, scope: !2)
    JCC_4 %bb.2, 13, implicit $eflags, debug-location !DILocation(line: 4, column: 3, scope: !2)
  
  bb.1:
    successors: %bb.3(0x80000000)
    liveins: $rbp
  
    $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 5, column: 7, scope: !2)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, $eax, debug-location !DILocation(line: 5, column: 6, scope: !2)
    $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg, debug-location !DILocation(line: 4, column: 22, scope: !2)
    $eax = ADD32ri8 $eax, 1, implicit-def $eflags, debug-location !DILocation(line: 4, column: 22, scope: !2)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, $eax, debug-location !DILocation(line: 4, column: 22, scope: !2)
    JMP_4 %bb.3, debug-location !DILocation(line: 4, column: 3, scope: !2)
  
  bb.2:
    liveins: $rbp
  
    $rax = MOVSX64rm32 $rbp, 1, $noreg, -12, $noreg, debug-location !DILocation(line: 7, column: 8, scope: !2)
    MOV64mr $rbp, 1, $noreg, -8, $noreg, $rax, debug-location !DILocation(line: 7, column: 6, scope: !2)
    $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 8, column: 11, scope: !2)
    $eax = crash-start MOV32rm $rax, 1, $noreg, 0, $noreg, debug-location !DILocation(line: 8, column: 10, scope: !2)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 8, column: 3, scope: !2)
    RET64 debug-location !DILocation(line: 8, column: 3, scope: !2)

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
regInfo:         { GPRegs: 
    - { reg: rax, value: '' }
    - { reg: rbx, value: '0x0000000000000000' }
    - { reg: rcx, value: '' }
    - { reg: rdx, value: '' }
    - { reg: rdi, value: '' }
    - { reg: rsi, value: '' }
    - { reg: rbp, value: '0x00007ffe019e20b0' }
    - { reg: rsp, value: '0x00007ffe019e20a0' }
    - { reg: r8, value: '' }
    - { reg: r9, value: '' }
    - { reg: r10, value: '' }
    - { reg: r11, value: '' }
    - { reg: r12, value: '0x00007ffe019e21c8' }
    - { reg: r13, value: '0x000055d0af8dd170' }
    - { reg: r14, value: '0x000055d0af8dfe20' }
    - { reg: r15, value: '0x00007f40f6949040' }
    - { reg: rip, value: '0x000055d0af8dd18f' }
    - { reg: rflags, value: '' }
    - { reg: cs, value: '' }
    - { reg: fs, value: '' }
    - { reg: gs, value: '' }
    - { reg: ss, value: '' }
    - { reg: ds, value: '' }
    - { reg: es, value: '' }
    - { reg: eax, value: '' }
    - { reg: ebx, value: '' }
    - { reg: ecx, value: '' }
    - { reg: edx, value: '' }
    - { reg: edi, value: '' }
    - { reg: esi, value: '' }
    - { reg: ebp, value: '' }
    - { reg: esp, value: '' }
    - { reg: r8d, value: '' }
    - { reg: r9d, value: '' }
    - { reg: r10d, value: '' }
    - { reg: r11d, value: '' }
    - { reg: r12d, value: '' }
    - { reg: r13d, value: '' }
    - { reg: r14d, value: '' }
    - { reg: r15d, value: '' }
    - { reg: ax, value: '' }
    - { reg: bx, value: '' }
    - { reg: cx, value: '' }
    - { reg: dx, value: '' }
    - { reg: di, value: '' }
    - { reg: si, value: '' }
    - { reg: bp, value: '' }
    - { reg: sp, value: '' }
    - { reg: r8w, value: '' }
    - { reg: r9w, value: '' }
    - { reg: r10w, value: '' }
    - { reg: r11w, value: '' }
    - { reg: r12w, value: '' }
    - { reg: r13w, value: '' }
    - { reg: r14w, value: '' }
    - { reg: r15w, value: '' }
    - { reg: ah, value: '' }
    - { reg: bh, value: '' }
    - { reg: ch, value: '' }
    - { reg: dh, value: '' }
    - { reg: al, value: '' }
    - { reg: bl, value: '' }
    - { reg: cl, value: '' }
    - { reg: dl, value: '' }
    - { reg: dil, value: '' }
    - { reg: sil, value: '' }
    - { reg: bpl, value: '' }
    - { reg: spl, value: '' }
    - { reg: r8l, value: '' }
    - { reg: r9l, value: '' }
    - { reg: r10l, value: '' }
    - { reg: r11l, value: '' }
    - { reg: r12l, value: '' }
    - { reg: r13l, value: '' }
    - { reg: r14l, value: '' }
    - { reg: r15l, value: '' } }
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
crashOrder:      2
body:             |
  bb.0:
    liveins: $rbp
  
    PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 11, scope: !5)
    $rbp = MOV64rr $rsp, debug-location !DILocation(line: 11, scope: !5)
    $rsp = SUB64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 11, scope: !5)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0, debug-location !DILocation(line: 11, scope: !5)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0, debug-location !DILocation(line: 12, column: 7, scope: !5)
    $rdi = LEA64r $rbp, 1, $noreg, -8, $noreg, debug-location !DILocation(line: 13, column: 10, scope: !5)
    CALL64pcrel32 @fn, csr_64, implicit $rsp, implicit $ssp, debug-location !DILocation(line: 13, column: 10, scope: !5)
    $rsp = crash-start ADD64ri8 $rsp, 16, implicit-def $eflags, debug-location !DILocation(line: 13, column: 3, scope: !5)
    $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 13, column: 3, scope: !5)
    RET64 debug-location !DILocation(line: 13, column: 3, scope: !5)

...
